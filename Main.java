/*********************************************************************************************************************
 *********************************************************************************************************************
 *****  Class: CSC-360-001-2019-040    Semester: Summer 2019    Professor: Richard Fox    Student: Ryan Huffman  *****
 *****-----------------------------------------------------------------------------------------------------------*****
 *****                                       Programming Assignment #4                                           *****
 *****___________________________________________________________________________________________________________*****
 *****          This  assignment  will  test  your  ability  to  write  further  event-driven  code  and         *****
 *****                               build  a  reasonable looking GUI interface.                                 *****
 *****                             The program itself will be a “story generator”.                               *****
 *****             The idea is that the GUI will control what aspects of a story will be generated               *****
 *****                                  along with buttons to control the GUI.                                   *****
 *****                The story itself will be created as a String and displayed in a TextArea.                  *****
 *****                            The TextArea can be edited if editable is selected.                            *****
 *****               A TextField will be used to input a file name for storing or loading a story.               *****
 *****                                                                                                           *****
 *****                               Your GUI will have the following components:                                *****
 *****    Three RadioButton objects to select the sex of the main character: male, female, other                *****
 *****    Six CheckBox objects to indicate what parts of the story to generate                                  *****
 *****        (some aspects of the story  will  always  be  generated  such  as                                  *****
 *****        the  name  of  the  main  character,                                                               *****
 *****        others  will  be selected by the user such as if there is a moral to the story)                    *****
 *****    Two RadioButton objects to toggle whether the TextArea is editable or not                             *****
 *****    Five  Buttons  to  perform  the  operation:  generate  new  story,  save  story  to  file,            *****
 *****        loadstory from file, clear current story, quit                                                     *****
 *****    One TextField to indicate a filename for load and save                                                *****
 *****    One Label to output the status of the program at this point (this is described in more detail below)  *****
 *****    NOTE:  other  Labels  can  be  added  to  provide  user  instructions such as “Select a sex”          *****
 *****             to appear above or by the RadioButtons and “Select aspects of the story to generate”          *****
 *****             to appear above or by the CheckBoxes.                                                         *****
 *****                                                                                                           *****
 *****         The story will be generated by randomly selecting Strings from a number of String arrays.         *****
 *****                Each array stores a list of possible choices about some aspect of the story,               *****
 *****                        such as the main character’s name or the moral of the story.                       *****
 *****                                          To generate the story,                                           *****
 *****      randomly select one String from each of the arrays either selected by the user (via the GUI) or      *****
 *****          because that particular story element is required (e.g.,  the  main  character’s  name).         *****
 *****              The story itself will be a String of these array elements concatenated together              *****
 *****                              along with some spaces and some joining phrases.                             *****
 *****                                                                                                           *****
 *****                                         The arrays needed are:                                            *****
 *****    3 main character  arrays, one for each of the three sex choices (male, female, other).                *****
 *****        For instance, the male array might consist of the Strings “Frank Zappa”, “Donald Trump”,           *****
 *****        “Samuel L Jackson”, “Tim”, “Zorro” and “Joey Votto”.                                               *****
 *****        The other array  should  be  of characters  that  are  neither male nor female                     *****
 *****        (e.g., “Hal 9000”, “Mickey Mouse”, “The Wizard of Oz”, etc –yes,                                   *****
 *****        Mickey might be considered male but I’m considering Mickey to be an it)                            *****
 *****    A starting location array of cities such as “Cincinnati”, “Lexington”, “Los Angeles”                  *****
 *****    A destination array of non-cities such as “Mexico”, “Arizona”, “the moon”;                            *****
 *****        make sure none of the destination locations are related to the starting locations                  *****
 *****        (for instance, we don’t want a story that says a character traveled from LA to California)         *****
 *****    The character that our main character intends to meet at the destination                              *****
 *****    A character that our main character actually met                                                      *****
 *****    An event that the character intends to do at the destination such as “climbing the highest mountain”, *****
 *****        “going to the theater”, “eating at a 5-star restaurant”                                            *****
 *****    An event that took place en route such as “got mugged”, “lost luggage”, “broke a leg”                 *****
 *****    A means of travel like “by plane”, “by car”, “on a bus”, “in a rocket”                                *****
 *****    An event that took place at the destination to the events en route                                    *****
 *****    A moral of the story                                                                                  *****
 *****                                                                                                           *****
 *****                   Every story should consist at a minimum of a main character, destination,               *****
 *****                      the event that the character intends to do at the destination and                    *****
 *****                                  the event that happened at the destination.                              *****
 *****              The user may select any other item to be added to the story using the CheckBoxes.            *****
 *****             These are starting location, intended character, actual character, means of travel,           *****
 *****                                   occurrence en route, moral of the story.                                *****
 *****                                  The sex should be selected by RadioButtons.                              *****
 *****                              You should have one RadioButton selected by default.                         *****
 *****       Add the three sex RadioButtons to a ToggleGroup so that only one can be selected at any time.       *****
 *****                                  As the main character’s name is based on sex,                            *****
 *****   you will have to determine which RadioButton is selected and use that to select the appropriate array.  *****
 *****                            What follows is an example of what this code looks like.                       *****
 *****     You will do something similar for each CheckBox except that those will be in simple if statements,    *****
 *****                                            not a nested if-else.                                          *****
 *****        Here, assume the story is stored in a String called story, the RadioButtons are maleButton,        *****
 *****  femaleButton and otherButton, and the arrays are maleCharacter, femaleCharacter and otherCharacter.      *****
 *****                                                                                                           *****
 *****                 if(maleButton.isSelected()) {                                                             *****
 *****                     story += maleCharacter[generator.nextInt(maleCharacter.length)];                      *****
 *****                 } else if(femaleButton.isSelect()) {                                                      *****
 *****                     story += femaleCharacter[generator.nextInt(femaleCharacter.length)];                  *****
 *****                 } else {                                                                                  *****
 *****                     story += otherCharacter[generator.nextInt(otherCharacter.length)];                    *****
 *****                 }                                                                                         *****
 *****                                                                                                           *****
 *****            Note that the CheckBoxes and the three sex RadioButtons do not need event handlers.            *****
 *****           Instead, you will use logic like that above to determine, when generating a new story,          *****
 *****                           whether the associated array should be used or not.                             *****
 *****                                                                                                           *****
 *****     The generated story will be inserted into a TextArea using setText as in textArea.setText(story);     *****
 *****    Control whether textArea is editable or not by two additional RadioButtons in their own ToggleGroup.   *****
 ***** These two RadioButtons should have their own event handlers to change whether textArea is editable or not *****
 *****                                  (use textArea.isEditable(true/false);).                                  *****
 *****                                                                                                           *****
 *****                There will be five Buttons to generate a new story, save the current story,                *****
 *****                        load a story into the TextArea, clear the story and quit.                          *****
 *****                           Each of the Buttons will have its own event handler                             *****
 *****              (or you can have a single event handler to handle all five Buttons if desired).              *****
 *****       Have separate methods to generate the story, load  a story, store a story and clear the story.      *****
 *****                      The event handler(s) will then invoke the appropriate method.                        *****
 *****                  To quit, do System.exit(0); This ends the program and closes the GUI.                    *****
 *****                              To clear the story, use textArea.setText(“”);                                *****
 *****        To load/store a program, you need java.io and so you need to implement exception handling.         *****
 *****             The name of the file to store to or load from will be input from the TextField.               *****
 *****                          If there is no filename, this will throw an Exception.                           *****
 *****                   Additionally, if there is an IO error, this will throw an Exception.                    *****
 *****                      Catch the two types of Exceptions and handle them differently.                       *****
 *****              Handle the IOException in a catch block first as you can specify IOException.                *****
 *****                   For no file name, have a second catch block which catches Exception.                    *****
 *****                                                                                                           *****
 *****              One additional GUI component is a Label to indicate the status of the program.               *****
 *****                             Output into this label the success of an operation                            *****
 *****                      (“Story created”, “Story cleared”, “Story loaded”, “Story saved”,                    *****
 *****                              “Text area editable”, “Text area not editable”).                             *****
 *****              In addition, if there is an exception, instead of doing System.out.println(e);               *****
 *****        output a message to this Label such as “No filename entered” or “Error when trying to save”.       *****
 *****                                                                                                           *****
 *****                                You are free to make up your own Strings.                                  *****
 *****                                   You can add categories if desired.                                      *****
 *****                                    Below is the GUI that I created.                                       *****
 *****               I have a few different images to illustrate it at different parts of execution.             *****
 *****                                     The first is the initial GUI.                                         *****
 *****                                                                                                           *****
 *****                                       After generating a story:                                           *****
 *****                                                                                                           *****
 *****                              Trying to save without specifying a file name:                               *****
 *****                                                                                                           *****
 *****                                        Generating a new story:                                            *****
 *****                                                                                                           *****
 *****                          Having saved the file to story.txt and selecting Clear:                          *****
 *****                                                                                                           *****
 *****                        Loading in the saved story and then selecting Not Editable:                        *****
 *****                                                                                                           *****
 *****                                            A few comments:                                                *****
 *****      1. Your grade will largely be based on how well you met the program specifications and               *****
 *****         how good your GUI looks. I spent several hours making my GUI look better.                         *****
 *****      2. If  your TextArea is too small for  your text, scroll bars will automatically appear,             *****
 *****         so  you don’t have to worry about making the TextArea large enough                                *****
 *****      3. I wrote a method that adding \n characters in the String as the String got longer                 *****
 *****         – I inserted a \n after every 50th character at the next blank space                              *****
 *****         – you can do something similar but the logic can be tricky.                                       *****
 *****         If you can’t figure it out, you can just insert \n after every 50th character.                    *****
 *****         This causes words to be split but that’s ok for this example.                                     *****
 *****         If you don’t insert \n’s, your story will be on one long line.                                    *****
 *****      4. Inputting from text file will be String by String.                                                *****
 *****         Insert blank spaces between each String or else the loaded story will be one big block            *****
 *****         of text with no spaces.                                                                           *****
 *****      5. Don’t worry about punctuation, spelling or proper grammar for your story.                         *****
 *****      6. To properly format my GUI, I used numerous Panes of different types.                              *****
 *****         The CheckBoxes are in a GridPane.                                                                 *****
 *****         The RadioButtons are in two VBoxes which are then combined using an HBox.                         *****
 *****         The TextArea is in a Pane by itself.                                                              *****
 *****         The Buttons are in a TilePane (something we didn’t cover in the lecture notes or textbook),       *****
 *****         the Label “Enter filename” and the TextField beneath it are followed by two blank Labels and      *****
 *****         the status Label (not visible initially) all in a VBox.                                           *****
 *****         To add blank space around the GUI components,                                                     *****
 *****         each type of Pane has a different way of specifying this.                                         *****
 *****         GridPane and others allow for setPadding as in pane1.setPadding(new Insets(10,20,10,20));         *****
 *****         The four numbers are the padding on top, right, bottom and left respectively.                     *****
 *****         VBox and HBox also use setPadding. VBox and HBox also have setSpacing(value)                      *****
 *****         as in pane2.setSpacing(10); FlowPane uses setHgap and setVgap (horizontal and vertical spacing).  *****
 *****         Once you have the GUI created, if there is too much space to the right or below,                  *****
 *****         change the Scene’s size as in                                                                     *****
 *****         Scene scene = new Scene(mainPane, 500, 300);                                                      *****
 *****         or whatever values you feel are useful.                                                           *****
 *****         Finally, you can specify the size of the TextArea using textArea.setPrefRowCount()and             *****
 *****         textArea.setPrefColumnCount(). I used 6 and 26 respectively.                                      *****
 *****         You can similarly set the column count of the TextField to keep it within a reasonable size.      *****
 *****                                                                                                           *****
 *****    Submit your GUI program and several (at least 5) screen captures of your GUI in use as I did above.    *****
 *****                           Place all of the screen captures in a Word document.                            *****
 *****            You can also place your program code in the Word document or send it separately.               *****
 *****         Email the Word document and program (or Word document alone if one file) to foxr@nku.edu.         *****
 *********************************************************************************************************************
 *********************************************************************************************************************/

// IMPORTS of needed tools and plug-ins
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import java.util.Random;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;


public class Main extends Application {

    // CLASS VARIABLE(s) declaration(s)
    private RadioButton rdoBtnMale, rdoBtnFemale, rdoBtnOther, rdoBtnEdit, rdoBtnNoEdit;
    private CheckBox chkBoxStartLocation, chkBoxIntendedChar, chkBoxActualChar, chkBoxTravelMeans, chkBoxEnRouteEvent,
            chkBoxMoral;
    private Button btnNewStory, btnSave, btnLoad, btnClear, btnQuit;
    private TextField txtFldFileName;
    private Label lblTextAreaEdit, lblFileName, lblBlank1, lblBlank2, lblStatus, lblSelectSex, lblStoryAspects;
    private TextArea txtAreaGenStory;
    private String story = "";
    private Random generator;
    private PrintWriter printWriter;
    private Scanner scanner;


    public static void main(String[] args) {
        launch(args);
    }


    @Override
    public void start(Stage primaryStage){

        // Initialize the Random variable
        generator = new Random();

        // Create and Initialize the needed story ArrayLists
        String[] arrayMaleNames = {"Frank Zappa", "Donald Trump", "Samuel L Jackson", "Tim", "Zorro", "Joey Votto"};
        String[] arrayFemaleNames = {"Janis Joplin", "Hillary Clinton", "Meryl Streep", "Jill", "Xena",
                "Serena Williams"};
        String[] arrayOtherNames = {"Hal 9000", "Mickey Mouse", "The Wizard of Oz", "C-3PO", "Stitch", "Johnny 5"};
        String[] arrayStartCities = {"Cincinnati", "Lexington", "Los Angeles", "New York", "Paris", "London"};
        String[] arrayDestinationArea = {"Mexico", "Arizona", "the Moon", "Australia", "Mariana Trench",
                "South Summit of Mount Everest"};
        String[] arrayIntendedChar = {"Dorothy", "Wonder Woman", "Hercules", "Paul McCartney", "E.T.", "Cheshire Cat"};
        String[] arrayActualChar = {"Bill Gates", "Steve Wozniak", "George Clooney", "Sylvester Stallone", "Neil Young",
                "Les Claypool"};
        String[] arrayIntendedDestActivity = {"climbing the highest mountain", "going to the theater",
                "eating at a 5-star restaurant", "taking soil samples", "go swimming", "go snowboarding"};
        String[] arrayTravelEvent = {"got mugged", "lost luggage", "broke a leg", "got lost", "got sick",
                "got mauled by a Koala"};
        String[] arrayTravelMeans = {"by plane", "by car", "on a bus", "in a rocket", "on a boat", "on a train"};
        String[] arrayDestEvent = {"had to be wired some money", "had to buy all new clothes", "went to the hospital",
                "had to pay for an extra day", "went to the pharmacy", "got tested for rabies"};
        String[] arrayMoral = {"be careful when travelling", "sometimes the adventure is better than the destination",
                "home is where you make it", "never miss an opportunity", "believe in yourself or no one else will",
                "life is what you make it"};

        /*
        ArrayList<String> arrayMaleNames = new ArrayList<String>(Arrays.asList("Frank Zappa", "Donald Trump",
                "Samuel L Jackson", "Tim", "Zorro", "Joey Votto"));
        ArrayList<String> arrayFemaleNames = new ArrayList<String>(Arrays.asList("Janis Joplin", "Hillary Clinton",
                "Meryl Streep", "Jill", "Xena", "Serena Williams"));
        ArrayList<String> arrayOtherNames = new ArrayList<String>(Arrays.asList("Hal 9000", "Mickey Mouse",
                "The Wizard of Oz", "C-3PO", "Stitch", "Johnny 5"));
        ArrayList<String> arrayStartCities = new ArrayList<String>(Arrays.asList("Cincinnati", "Lexington",
                "Los Angeles", "New York", "Paris", "London"));
        ArrayList<String> arrayDestinationArea = new ArrayList<String>(Arrays.asList("Mexico", "Arizona",
                "the Moon", "Australia", "Mariana Trench", "Mount Everest"));
        ArrayList<String> arrayIntendedChar = new ArrayList<String>(Arrays.asList("Dorothy", "Wonder Woman", "Hercules",
                "Paul McCartney", "E.T.", "Cheshire Cat"));
        ArrayList<String> arrayActualChar = new ArrayList<String>(Arrays.asList("Bill Gates", "Steve Wozniak",
                "George Clooney", "Sylvester Stallone", "Neil Young", "Les Claypool"));
        ArrayList<String> arrayIntendedDestActivity = new ArrayList<String>(Arrays.asList("climbing the highest mountain",
                "going to the theater", "eating at a 5-star restaurant", "taking soil samples", "go swimming",
                "go snowboarding"));
        ArrayList<String> arrayTravelEvent = new ArrayList<String>(Arrays.asList("“got mugged", "lost luggage",
                "broke a leg", "got lost", "got sick", "got attacked by a kangaroo"));
        ArrayList<String> arrayTravelMeans = new ArrayList<String>(Arrays.asList("by plane", "by car", "on a bus",
                "in a rocket", "on a boat", "on a train"));
        ArrayList<String> arrayDestEvent = new ArrayList<String>(Arrays.asList("had to be wired some money",
                "had to buy all new clothes", "went to the hospital", "had to pay for an extra day",
                "went to the pharmacy", "got tested for rabies"));
        ArrayList<String> arrayMoral = new ArrayList<String>(Arrays.asList("be careful when travelling",
                "sometimes the adventure is better than the destination", "home is where you make it",
                "never miss an opportunity", "believe in yourself or no one else will", "life is what you make it"));
                */

        // Initialize the Labels to output the status of the program, provide instructions to select a sex and
        // to select aspects of the story to generate
        lblFileName = new Label("Enter filename: ");
        lblStatus = new Label("");
        lblSelectSex = new Label("Main character sex: ");
        lblStoryAspects = new Label("Select story elements: ");
        lblTextAreaEdit = new Label("Text area: ");
        lblBlank1 = new Label("");
        lblBlank2 = new Label("");

        // Initialize the RadioButtons to assign a sex
        rdoBtnMale = new RadioButton("Male");
        rdoBtnFemale = new RadioButton("Female");
        rdoBtnOther = new RadioButton("Other");

        // Create and Initialize the ToggleGroup for the RadioButtons dealing with assigning a sex,
            // then, assigning the corresponding RadioButtons to the ToggleGroup and Setting the "Male" RadioButton
            // to be selected as default
        ToggleGroup tGroupSex = new ToggleGroup();
        rdoBtnMale.setToggleGroup(tGroupSex);
        rdoBtnFemale.setToggleGroup(tGroupSex);
        rdoBtnOther.setToggleGroup(tGroupSex);
        rdoBtnMale.setSelected(true);

        // Create and Initialize a VBox to store the ToggleGroup of RadioButtons dealing with a person/thing's sex and
            // its Label, then add the appropriate RadioButtons and Set the Padding of the RadioButtons in the VBox
        VBox rdoBtnSexVBoxPane = new VBox();
        rdoBtnSexVBoxPane.getChildren().add(lblSelectSex);
        rdoBtnSexVBoxPane.getChildren().add(rdoBtnMale);
        rdoBtnSexVBoxPane.getChildren().add(rdoBtnFemale);
        rdoBtnSexVBoxPane.getChildren().add(rdoBtnOther);
        rdoBtnSexVBoxPane.setPadding(new Insets(10, 20, 10, 20));

        // Initialize RadioButtons to Toggle TextArea as editable or not editable
        rdoBtnEdit = new RadioButton("Editable");
        rdoBtnNoEdit = new RadioButton("Not Editable");

        // Create and Initialize the ToggleGroup for RadioButtons dealing with whether the TextArea is Editable or not
            // and Setting the "Editable" RadioButton to be selected as default
        ToggleGroup tGroupEdit = new ToggleGroup();
        rdoBtnEdit.setToggleGroup(tGroupEdit);
        rdoBtnNoEdit.setToggleGroup(tGroupEdit);
        rdoBtnEdit.setSelected(true);

        // Create and Initialize a VBox to store the ToggleGroup of RadioButtons dealing with Setting the TextArea
            // as Editable or not and its Label and then add the appropriate RadioButtons and Set the Padding of the
            // RadioButtons in the VBox
        VBox rdoBtnEditVBoxPane = new VBox();
        rdoBtnEditVBoxPane.getChildren().add(lblTextAreaEdit);
        rdoBtnEditVBoxPane.getChildren().add(rdoBtnEdit);
        rdoBtnEditVBoxPane.getChildren().add(rdoBtnNoEdit);
        rdoBtnEditVBoxPane.setPadding(new Insets(10, 20, 10, 20));

        // Create and Initialize a HBox to store the two RadioButton VBoxes and Set the Spacing of the VBoxes inside
            // this HBox
        HBox rdoBtnGroupsHBoxPane = new HBox();
        rdoBtnGroupsHBoxPane.getChildren().add(rdoBtnSexVBoxPane);
        rdoBtnGroupsHBoxPane.getChildren().add(rdoBtnEditVBoxPane);
        rdoBtnGroupsHBoxPane.setSpacing(10);

        // Initialize CheckBoxes for the user to select parts of the story to add
        chkBoxStartLocation = new CheckBox("Location from");
        chkBoxIntendedChar = new CheckBox("Intended to meet");
        chkBoxActualChar = new CheckBox("Actually met");
        chkBoxTravelMeans = new CheckBox("Travelled by");
        chkBoxEnRouteEvent = new CheckBox("Action en route");
        chkBoxMoral = new CheckBox("Moral of story");

        // Create and Initialize a GridPane to store the CheckBoxes and its Label and Set the Padding of the GridPane
        GridPane chkBoxGridPane = new GridPane();
        chkBoxGridPane.add(lblStoryAspects, 0, 0);
        chkBoxGridPane.add(chkBoxStartLocation, 0, 1);
        chkBoxGridPane.add(chkBoxIntendedChar, 0, 2);
        chkBoxGridPane.add(chkBoxActualChar, 0, 3);
        chkBoxGridPane.add(chkBoxTravelMeans, 1, 1);
        chkBoxGridPane.add(chkBoxEnRouteEvent, 1, 2);
        chkBoxGridPane.add(chkBoxMoral, 1, 3);
        chkBoxGridPane.setPadding(new Insets(10, 20, 10, 20));

        // Initialize Buttons to perform various Actions and Set their Preferred Width and Height
        btnNewStory = new Button("Generate");
        btnNewStory.setPrefHeight(30);
        btnNewStory.setPrefWidth(80);
        btnSave = new Button("Save");
        btnSave.setPrefHeight(30);
        btnSave.setPrefWidth(80);
        btnLoad = new Button("Load");
        btnLoad.setPrefHeight(30);
        btnLoad.setPrefWidth(80);
        btnClear = new Button("Clear");
        btnClear.setPrefHeight(30);
        btnClear.setPrefWidth(80);
        btnQuit = new Button("Quit");
        btnQuit.setPrefHeight(30);
        btnQuit.setPrefWidth(80);

        // Create and Initialize a TilePane to store the Buttons to perform various Actions and Set the HGap of
            // the Buttons in the TilePane and Set its Orientation to VERTICAL
        TilePane btnTilePane = new TilePane();
        btnTilePane.getChildren().add(btnNewStory);
        btnTilePane.getChildren().add(btnSave);
        btnTilePane.getChildren().add(btnLoad);
        btnTilePane.getChildren().add(btnClear);
        btnTilePane.getChildren().add(btnQuit);
        btnTilePane.setOrientation(Orientation.VERTICAL);
        btnTilePane.setVgap(5);

        // Initialize the TextArea that will be used to output the generated story and Set its Preferred Column
            // and Row Count
        txtAreaGenStory = new TextArea("");
        txtAreaGenStory.setPrefRowCount(6);
        txtAreaGenStory.setPrefColumnCount(26);

        // Create and Initialize a Pane to store the TextArea and Set the Padding of the Pane
        Pane txtAreaPane = new Pane();
        txtAreaPane.getChildren().add(txtAreaGenStory);
        txtAreaPane.setPadding(new Insets(10, 20, 10, 20));

        // Initialize the TextField to specify which file to load or save and Set its Preferred Column Count
        txtFldFileName = new TextField("");
        txtFldFileName.setPrefColumnCount(16);

        // Create and Initialize a VBox to store the Labels lblStatus, lblBlank1 and lblBlank2 and the TextField and
            // Set the Padding of the VBox
        VBox txtFldAndLblsVBoxPane = new VBox();
        txtFldAndLblsVBoxPane.getChildren().add(lblFileName);
        txtFldAndLblsVBoxPane.getChildren().add(txtFldFileName);
        txtFldAndLblsVBoxPane.getChildren().add(lblBlank1);
        txtFldAndLblsVBoxPane.getChildren().add(lblBlank2);
        txtFldAndLblsVBoxPane.getChildren().add(lblStatus);
        txtFldAndLblsVBoxPane.setPadding(new Insets(10, 20, 10, 20));

        // Create and Initialize a VBox for the left side of the main Pane
        VBox leftSideVBox = new VBox();
        leftSideVBox.getChildren().add(chkBoxGridPane);
        leftSideVBox.getChildren().add(txtAreaPane);

        // Create and Initialize a HBox for the Buttons and Labels and TextField
        HBox btnsAndTxtFldHBox = new HBox();
        btnsAndTxtFldHBox.getChildren().add(btnTilePane);
        btnsAndTxtFldHBox.getChildren().add(txtFldAndLblsVBoxPane);

        // Create and Initialize a VBox for the right side of the main Pane
        VBox rightSideVBox = new VBox();
        rightSideVBox.getChildren().add(rdoBtnGroupsHBoxPane);
        rightSideVBox.getChildren().add(btnsAndTxtFldHBox);

        // Create and Initialize the main Pane to add the two VBoxes to in order to add it to the Scene
            // and Set the Padding of the Pane
        HBox mainPane = new HBox();
        mainPane.getChildren().add(leftSideVBox);
        mainPane.getChildren().add(rightSideVBox);
        mainPane.setPadding(new Insets(10, 20, 10, 20));

        // Create and Initialize the Scene, Set the Title of the Stage, Set the Scene to the Stage, Show the Stage
        Scene scene = new Scene(mainPane, 700, 300);
        primaryStage.setTitle("Story Generator: Programming Assignment #4 - Ryan Huffman");
        primaryStage.setScene(scene);
        primaryStage.show();

        // EventHandler for when the RadioButton "Editable" is selected
        EventHandler<ActionEvent> rdoBtnEditHandler = e -> {
            // Set the TextArea to display the story as editable
            txtAreaGenStory.setEditable(true);

            // Clear the String text in the status Label and then Set the String Text
            lblStatus.setText("");
            lblStatus.setText("Text area editable");
        };

        // EventHandler for when the RadioButton "Not Editable" is selected
        EventHandler<ActionEvent> rdoBtnNoEditHandler = e -> {
            // Set the TextArea to display the story as not editable
            txtAreaGenStory.setEditable(false);

            // Clear the String text in the status Label and then Set the String Text
            lblStatus.setText("");
            lblStatus.setText("Text area not editable");
        };

        // Set the ActionEvent EventHandlers for the RadioButtons "Editable" and "Not Editable"
        rdoBtnEdit.setOnAction(rdoBtnEditHandler);
        rdoBtnNoEdit.setOnAction(rdoBtnNoEditHandler);

        // EventHandler for the Generate Button
        btnNewStory.setOnAction(e -> {
            generateStory();
        });

        // EventHandler for the Clear Button
        btnClear.setOnAction(e -> {
            clearStory();
        });

        // EventHandler for the Load Button
        btnLoad.setOnAction(e -> {
            loadStory(txtFldFileName.getText());
        });

        // EventHandler for the Save Button
        btnSave.setOnAction(e -> {
            saveStory(txtFldFileName.getText());
        });

        // EventHandler for the Quit Button
        btnQuit.setOnAction(e -> {
            System.exit(0);
        });
    }


    public void generateStory(){
        // Initialize the Random variable
        generator = new Random();

        // Create and Initialize the needed story ArrayLists
        String[] arrayMaleNames = {"Frank Zappa", "Donald Trump", "Samuel L Jackson", "Tim", "Zorro", "Joey Votto"};
        String[] arrayFemaleNames = {"Janis Joplin", "Hillary Clinton", "Meryl Streep", "Jill", "Xena",
                "Serena Williams"};
        String[] arrayOtherNames = {"Hal 9000", "Mickey Mouse", "The Wizard of Oz", "C-3PO", "Stitch", "Johnny 5"};
        String[] arrayStartCities = {"Cincinnati", "Lexington", "Los Angeles", "New York", "Paris", "London"};
        String[] arrayDestinationArea = {"Mexico", "Arizona", "the Moon", "Australia", "Mariana Trench",
                "South Summit of Mount Everest"};
        String[] arrayIntendedChar = {"Dorothy", "Wonder Woman", "Hercules", "Paul McCartney", "E.T.", "Cheshire Cat"};
        String[] arrayActualChar = {"Bill Gates", "Steve Wozniak", "George Clooney", "Sylvester Stallone", "Neil Young",
                "Les Claypool"};
        String[] arrayIntendedDestActivity = {"climb the highest mountain", "be going to the theater",
                "eat at a 5-star restaurant", "taking soil samples", "go swimming", "go snowboarding"};
        String[] arrayTravelEvent = {"got mugged", "lost luggage", "broke a leg", "got lost", "got sick",
                "got mauled by a Koala"};
        String[] arrayTravelMeans = {"by plane", "by car", "on a bus", "in a rocket", "on a boat", "on a train"};
        String[] arrayDestEvent = {"had to be wired some money", "had to buy all new clothes", "went to the hospital",
                "had to pay for an extra day", "went to the pharmacy", "got tested for rabies"};
        String[] arrayMoral = {"be careful when travelling", "sometimes the adventure is better than the destination",
                "home is where you make it", "never miss an opportunity", "believe in yourself or no one else will",
                "life is what you make it"};

        // Check if Male RadioButton is Selected and add to the story with a male name if so
        if(rdoBtnMale.isSelected()){
            story += arrayMaleNames[generator.nextInt(arrayMaleNames.length)] + " ";
        }
        // Check if Female RadioButton is Selected and add to the story with a female name if so
        else if(rdoBtnFemale.isSelected()){
            story += arrayFemaleNames[generator.nextInt(arrayFemaleNames.length)] + " ";
        }
        // Check if Other RadioButton is Selected and add to the story with a other name if so
        else if(rdoBtnOther.isSelected()){
            story += arrayOtherNames[generator.nextInt(arrayOtherNames.length)] + " ";
        }

        // Add the location the main character is travelling to
        story += " travelled to ";
        story += arrayDestinationArea[generator.nextInt(arrayDestinationArea.length)];

        // Check if the CheckBox for Starting Location is Selected and add it to the story if so
        if(chkBoxStartLocation.isSelected()){
            story += " from ";
            story += arrayStartCities[generator.nextInt(arrayStartCities.length)] + " ";
        }
        // Check if the CheckBox for Intended to meet is Selected and add it to the story if so
        if(chkBoxIntendedChar.isSelected()){
            story += " planning to meet ";
            story += arrayIntendedChar[generator.nextInt(arrayIntendedChar.length)] + " ";
        }

        // Add the planned destination activity
        story += " intending to ";
        story += arrayIntendedDestActivity[generator.nextInt(arrayIntendedDestActivity.length)];

        // Check if the CheckBox for Actually met is Selected and add it to the story if so
        if(chkBoxActualChar.isSelected()){
            story += " and ended up meeting ";
            story += arrayActualChar[generator.nextInt(arrayActualChar.length)] + " ";
        }
        // Check if the CheckBox for Travelled by is Selected and add it to the story if so
        if(chkBoxTravelMeans.isSelected()){
            story += " ended up traveling ";
            story += arrayTravelMeans[generator.nextInt(arrayTravelMeans.length)] + " ";
        }
        // Check if the CheckBox for En route action is Selected and add it to the story if so
        if(chkBoxEnRouteEvent.isSelected()){
            story += " but en route ";
            story += arrayTravelEvent[generator.nextInt(arrayTravelEvent.length)] + " ";
        }

        // Add to the story the actual event that happened at the destination
        story += " and at the destination ";
        story += arrayDestEvent[generator.nextInt(arrayDestEvent.length)];

        // Check if the CheckBox for Moral of story is Selected and add it to the story if so
        if(chkBoxMoral.isSelected()){
            story += " so let the moral of the story be known .... ";
            story += arrayMoral[generator.nextInt(arrayMoral.length)] + " ";
        }

        // Check if the TextArea is Editable before posting the generated story to the TextArea
        if(txtAreaGenStory.isEditable()){
            // Send the String variable story to the insertLineBreak method to add line breaks
            story = insertLineBreak(story);

            // Set the String text of the TextArea to the String variable story
            txtAreaGenStory.setText(story);

            // Clear the String text in the status Label, then Set the String text
            lblStatus.setText("");
            lblStatus.setText("Story created");
        }

        // Clear the String variable story for the next use
        story = "";
    }


    // Method used to Load a story in from a File
    public void loadStory(String filename){
        // Clear the TextArea
        clearStory();

        // Try block to attempt to load the File with the filename passed in as a parameter to the
            // loadStory(String filename) method
        try{
            // if statement block to test that a String filename was passed into the method
            if(filename.length() == 0){
                throw new Exception("No filename entered");
            }
            // else statement block that executes if a filename was passed into the method
            else {
                // Initialize the Scanner with the File with filename passed in as a parameter
                scanner = new Scanner(new File(filename));

                // if statement block to check that the File whose name was passed in as a parameter has some String text
                if (scanner.hasNext()) {

                    // Clear the String text in the status Label, then Set the String text
                    lblStatus.setText("");
                    lblStatus.setText("Story loaded");

                    // While loop to read all the text in the File
                    while (scanner.hasNext()) {
                        // Read the current String or char and concatenate it onto the story String variable
                        story += scanner.next();
                        story += " ";
                    }

                    // Add a line break every 50 characters
                    story = insertLineBreak(story);

                    if(story.length() == 0){
                        throw new Exception("Error when trying to load \"" + filename + "\"");
                    }

                    // Clear all the String text in the TextArea and then Set the String text to that of the File whose name
                        // was passed in as a parameter
                    txtAreaGenStory.setText("");
                    txtAreaGenStory.setText(story);
                }
            }
        }
        // Catch block to handle IOException
        catch(IOException iOExc){
            // Clear the status Label and then display the IOException in the status Label
            lblStatus.setText("");
            lblStatus.setText(String.valueOf(iOExc));
        }
        // Catch block to handle any other Exceptions
        catch(Exception exc){
            // Clear the String text of the status Label and then Set the String text of the status Label to the
                // Exception that was triggered
            lblStatus.setText("");
            lblStatus.setText(String.valueOf(exc));
        }
        // Finally block to close the Scanner if it is not Null
        finally{
            // if statement block to check if the Scanner is equal to Null
            if(scanner != null){
                scanner.close();
            }
        }
    }


    // Method to save the story to a file
    public void saveStory(String filename){
        // Clear the String variable story in case there is anything left over in it
        story = "";

        // Try block to attempt to write to the File whose filename was passed in as a parameter
        try{
            // if statement block to test that a String filename was passed into the method
            if(filename.length() == 0){
                throw new Exception("No filename entered");
            }
            // else statement block that executes if a filename was passed into the method
            else{
                // Initialize the PrintWriter
                printWriter = new PrintWriter(filename);

                // Get the String text from the TextArea and store it in the String variable story
                story = txtAreaGenStory.getText();

                if(story.length() == 0){
                    throw new Exception("No text to store in the file \"" + filename + "\"");
                }

                // Write the story to the File with the filename that was passed in as a parameter using the
                    // PrintWriter
                printWriter.println(story);

                // Clear the String text in the status Label, then Set the String text
                lblStatus.setText("");
                lblStatus.setText("Story saved");
            }
        }
        // Catch block to handle IOException
        catch(IOException iOExc){
            // Clear the status Label and then display the IOException in the status Label
            lblStatus.setText("");
            lblStatus.setText(String.valueOf(iOExc));
        }
        // Catch block to handle any other Exceptions
        catch(Exception exc){
            // Clear the String text of the status Label and then Set the String text of the status Label to the
            // Exception that was triggered
            lblStatus.setText("");
            lblStatus.setText(String.valueOf(exc));
        }
        // Finally block used to close the PrintWriter if it is not Null
        finally {
            // if statement block used to check that the PrintWriter File is not Null and Close it if it is not Null
            if(printWriter != null){
                printWriter.close();
            }
        }
    }


    // Method to clear the TextArea of the story and any other text
    public void clearStory(){
        // Clear all the String text in the TextArea
        txtAreaGenStory.setText("");

        // Clear all the String text in the status Label and then Set the String text of the status Label as below
        lblStatus.setText("");
        lblStatus.setText("Story cleared");
    }


    // Method to insert a line break after every 50 characters
    public String insertLineBreak(String str){
        // Replace every 50th Character with a line break
        String parsedStr = str.replaceAll("(.{50})", "$1\n");

        // Return the String
        return parsedStr;
    }
}
